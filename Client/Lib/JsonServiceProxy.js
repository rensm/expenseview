// This JavaScript was automatically generated by
// Jayrock.JsonRpc.Web.JsonRpcProxyGenerator, Jayrock, Version=0.9.8316.0, Culture=neutral, PublicKeyToken=null
// on Sunday, August 15, 2010 at 11:59:44 PM (Eastern Daylight Time)

// Proxy version 1.0

function JsonService(url)
{
    this["GetUserSummary"] = function(userDate, callback)
    {
        return call("GetUserSummary", [ userDate ], callback);
    }
    
    this["DeleteCategory"] = function(categoryID, callback)
    {
        return call("DeleteCategory", [ categoryID ], callback);
    }
    
    this["InsertCategory"] = function(category, callback)
    {
        return call("InsertCategory", [ category ], callback);
    }
    
    this["UpdateCategory"] = function(category, callback)
    {
        return call("UpdateCategory", [ category ], callback);
    }
    
    this["InsertSubCategory"] = function(subCategory, callback)
    {
        return call("InsertSubCategory", [ subCategory ], callback);
    }
    
    this["UpdateSubCategory"] = function(subCategory, callback)
    {
        return call("UpdateSubCategory", [ subCategory ], callback);
    }
    
    this["DeleteSubCategory"] = function(subCategoryID, callback)
    {
        return call("DeleteSubCategory", [ subCategoryID ], callback);
    }
    
    this["InsertTrans"] = function(trans, callback)
    {
        return call("InsertTrans", [ trans ], callback);
    }
    
    this["DeleteTrans"] = function(transID, callback)
    {
        return call("DeleteTrans", [ transID ], callback);
    }
    
    this["UpdateTrans"] = function(trans, callback)
    {
        return call("UpdateTrans", [ trans ], callback);
    }
    
    this["SearchTrans"] = function(startDate, endDate, categoryType, catIDString, amountOperator, amount, callback)
    {
        return call("SearchTrans", [ startDate, endDate, categoryType, catIDString, amountOperator, amount ], callback);
    }
    
    this["GetTransPieGraphForDefaultDateRange"] = function(defaultDateRange, categoryType, currentUserDate, callback)
    {
        return call("GetTransPieGraphForDefaultDateRange", [ defaultDateRange, categoryType, currentUserDate ], callback);
    }
    
    this["GetTransPieGraphForCustomDateRange"] = function(categoryType, startDate, endDate, callback)
    {
        return call("GetTransPieGraphForCustomDateRange", [ categoryType, startDate, endDate ], callback);
    }
    
    /* Returns an array of method names implemented by this service. */
    
    this["system.listMethods"] = function(callback)
    {
        return call("system.listMethods", [ ], callback);
    }
    
    /* Returns the version server implementation using the major, minor, build and revision format. */
    
    this["system.version"] = function(callback)
    {
        return call("system.version", [ ], callback);
    }
    
    /* Returns a summary about the server implementation for display purposes. */
    
    this["system.about"] = function(callback)
    {
        return call("system.about", [ ], callback);
    }

    var serviceURL = "http://" + window.location.host + "/Service/ExpJSONService.ashx";
    var url = typeof (url) === 'string' ? url : serviceURL;

    var self = this;
    var nextId = 0;

    function call(method, params, callback)
    {
        var request = { id : nextId++, method : method, params : params };
        return callback == null ? 
            callSync(method, request) : callAsync(method, request, callback);
    }

    function callSync(method, request)
    {
        var http = newHTTP();
        http.open('POST', url, false, self.httpUserName, self.httpPassword);
        setupHeaders(http, method);
        http.send(JSON.stringify(request));
        if (http.status != 200)
            throw { message : http.status + ' ' + http.statusText, toString : function() { return message; } };
        var response = JSON.eval(http.responseText);
        if (response.error != null) throw response.error;
        return response.result;
    }

    function callAsync(method, request, callback)
    {
        var http = newHTTP();
        http.open('POST', url, true, self.httpUserName, self.httpPassword);
        setupHeaders(http, method);
        http.onreadystatechange = function() { http_onreadystatechange(http, callback); }
        http.send(JSON.stringify(request));
        return request.id;
    }

    function setupHeaders(http, method)
    {
        http.setRequestHeader('Content-Type', 'text/plain; charset=utf-8');
        http.setRequestHeader('X-JSON-RPC', method);
    }

    function http_onreadystatechange(sender, callback)
    {
        if (sender.readyState == /* complete */ 4)
        {
            var response = sender.status == 200 ? 
                JSON.eval(sender.responseText) : {};
            
            response.xmlHTTP = sender;
                
            callback(response);
        }
    }

    function newHTTP()
    {
        if (typeof(window) != 'undefined' && window.XMLHttpRequest)
            return new XMLHttpRequest(); /* IE7, Safari 1.2, Mozilla 1.0/Firefox, and Netscape 7 */
        else
            return new ActiveXObject('Microsoft.XMLHTTP'); /* WSH and IE 5 to IE 6 */
    }
}

JsonService.rpcMethods = ["GetUserSummary","DeleteCategory","InsertCategory","UpdateCategory","InsertSubCategory","UpdateSubCategory","DeleteSubCategory","InsertTrans","DeleteTrans","UpdateTrans","SearchTrans","GetTransPieGraphForDefaultDateRange","GetTransPieGraphForCustomDateRange","system.listMethods","system.version","system.about"];
